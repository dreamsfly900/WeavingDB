<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weave.Base</name>
    </assembly>
    <members>
        <member name="M:Weave.Base.InstallFunAttribute.#ctor(System.String)">
            <summary>
            标识这个方法是执行一次即卸载，还是长期执行
            </summary>
            <param name="type">forever,或noce</param>
        </member>
        <member name="T:Weave.Base.Interface.IDataparsing">
            <summary>
            接口---定义可把自定义协议转换为网关理解的协议
            </summary>
        </member>
        <member name="M:Weave.Base.Interface.IDataparsing.GetBaseModel(System.Byte[])">
            <summary>
            把自定义的协议，转化成网关理解的协议
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Weave.Base.Interface.IDataparsing.Get_Byte(Weave.Base.WeaveSession)">
            <summary>
            把网关理解的协议转换成自定义的协议
            </summary>
            <param name="bm"></param>
            <returns></returns>
        </member>
        <member name="M:Weave.Base.Interface.IDataparsing.Get_ByteBystring(System.String)">
            <summary>
            把String字符串转化成自定义协议
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Weave.Base.Interface.IDataparsing.Socketvalidation(Weave.Base.WeaveSession)">
            <summary>
            把网关理解的协议对象的值，进行权限验证
            </summary>
            <param name="bm"></param>
            <returns></returns>
        </member>
        <member name="T:Weave.Base.Interface.IWeaveCommand">
            <summary>
            含有一个可传递一个泛型类的接口
            </summary>
        </member>
        <member name="T:Weave.Base.Interface.IWeaveTcpBase">
            <summary>
            主要TCP服务器接口，有4个事件，两个发送方法（byte数组和string 数据），还有Start方法的
            </summary>
        </member>
        <member name="P:Weave.Base.Interface.IWeaveTcpBase.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="M:Weave.Base.Interface.IWeaveTcpBase.Start(System.Int32)">
            <summary>
            启动服务器的方法
            </summary>
            <param name="port">要监听的端口号</param>
        </member>
        <member name="M:Weave.Base.Interface.IWeaveTcpBase.GetNetworkItemCount">
            <summary>
            获取在线客户端的数量
            </summary>
            <returns>在线客户端数量</returns>
        </member>
        <member name="E:Weave.Base.Interface.IWeaveTcpBase.waveReceiveEvent">
            <summary>
            接收到Socket数据事件
            </summary>
        </member>
        <member name="E:Weave.Base.Interface.IWeaveTcpBase.weaveReceiveBitEvent">
            <summary>
            接收到Socket发来的Bit数据的事件
            </summary>
        </member>
        <member name="E:Weave.Base.Interface.IWeaveTcpBase.weaveUpdateSocketListEvent">
            <summary>
            接收到Socket第一次连接到服务器的事件
            </summary>
        </member>
        <member name="E:Weave.Base.Interface.IWeaveTcpBase.weaveDeleteSocketListEvent">
            <summary>
            接收到Socket断开连接的事件
            </summary>
        </member>
        <member name="T:Weave.Base.Interface.IWeaveUniversal">
            <summary>
            含有一个Run方法的接口
            </summary>
        </member>
        <member name="F:Weave.Base.CRC.crctab">
            <summary>
            CRCTAB 表
            </summary>
        </member>
        <member name="M:Weave.Base.CRC.Xcrc(System.UInt16,System.Byte)">
            <summary>
            CRC校验公式
            </summary>
            <param name="crc">CRC</param>
            <param name="cp">发送的数据序列</param>
            <returns>新CRC</returns>
        </member>
        <member name="M:Weave.Base.CRC.ConCRC(System.Byte[]@,System.Int32)">
            <summary>
            添加CRC校验字
            </summary>
            <param name="bufin">信息串</param>
            <param name="n">不包括校验字的串总长度</param>
        </member>
        <member name="M:Weave.Base.CRC.DataCRC(System.Byte[]@,System.Int32)">
            <summary>
            CRC数据验证
            </summary>
            <param name="bufout">信息串</param>
            <param name="count">接收数据总长度</param>
            <returns>true:校验成功,false:校验失败</returns>
        </member>
        <member name="T:Weave.Base.WeaveBaseServer">
            <summary>
            继承自IWeaveTcpBase接口的 类
            </summary>
        </member>
        <member name="M:Weave.Base.WeaveBaseServer.packageDatajson(System.Byte[],System.Net.Sockets.Socket)">
            <summary>
            对粘包，分包的处理方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Weave.Base.WeaveBaseManager.AddListen(System.String,Weave.Base.WeaveRequestDataDelegate,System.String)">
            <summary>
            请求数据集事件
            </summary>
        </member>
        <member name="M:Weave.Base.WeaveBaseManager.Init(System.String,System.Net.Sockets.Socket)">
            <summary>
            错误返回事件
            </summary>
        </member>
        <member name="T:Weave.Base.WeaveOnLine">
            <summary>
            连接到服务器的Socket封装类，含有Token,Name,Obj和原始Socket 
            </summary>
        </member>
        <member name="T:Weave.Base.WeaveSession">
            <summary>
            0x01基类
            </summary>
        </member>
        <member name="M:Weave.Base.WeaveSession.Getjson">
            <summary>
            序列化当前传输类
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weave.Base.WeaveSession.Root">
            <summary>
            服务器查询结果
            </summary>
        </member>
        <member name="M:Weave.Base.WeaveSession.SetRoot``1(``0)">
            <summary>
            赋值查询结果
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="t"></param>
        </member>
        <member name="M:Weave.Base.WeaveSession.GetRoot``1">
            <summary>
            获取查询结果
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Weave.Base.WeaveSession.Parameter">
            <summary>
            检索条件
            </summary>
        </member>
        <member name="P:Weave.Base.WeaveSession.Token">
            <summary>
            授权验证
            </summary>
        </member>
        <member name="M:Weave.Base.WeaveSession.SetParameter``1(``0)">
            <summary>
            设置查询参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
        </member>
        <member name="M:Weave.Base.WeaveSession.GetParameter``1">
            <summary>
            获取查询参数
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Weave.Base.WeaveSession.Querycount">
             <summary>
            查询总条数
             </summary>
        </member>
        <member name="M:Weave.Base.WeaveTCPCommand.GetOnLineByToken(System.String)">
            <summary>
            根据TOKEN 获取online对象
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Weave.Base.WeaveTCPCommand.SetOnLineByToken(System.String,System.String,System.Object)">
            <summary>
            根据TOKEN 设置 name与OBJ属性
            </summary>
            <param name="token"></param>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Weave.Base.WeaveTCPCommand.SetonLineByToken(System.String,System.Object)">
            <summary>
            根据TOKEN 设置 OBJ属性
            </summary>
            <param name="token"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Weave.Base.WeaveTCPCommand.AddOnLine(Weave.Base.WeaveOnLine)">
            <summary>
            新增online
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Weave.Base.WeaveTCPCommand.Runcommand(System.Byte,System.String,System.Net.Sockets.Socket)">
            <summary>
            这个方法会被重写
            </summary>
            <param name="command"></param>
            <param name="data"></param>
            <param name="soc"></param>
        </member>
        <member name="T:Weave.Base.WeaveTcpToken">
            <summary>
            含有 IWeaveTcpBase，IDataparsing两个接口，两个 WeavePortTypeEnum 枚举对象，分别为PortType，WPTE
            </summary>
        </member>
        <member name="P:Weave.Base.WeaveTcpToken.PortType">
            <summary>
            端口类型
            </summary>
        </member>
        <member name="F:Weave.Base.WeaveTcpToken.P2Server">
            <summary>
            实现接口的服务器对象
            </summary>
        </member>
        <member name="P:Weave.Base.WeaveTcpToken.BytesDataparsing">
            <summary>
            数据转换接口的实现类，用于数据处理，转换
            </summary>
        </member>
        <member name="P:Weave.Base.WeaveTcpToken.WPTE">
            <summary>
            枚举类型，看是哪一种socket协议
            </summary>
        </member>
        <member name="T:Weave.Base.WeaveUser">
            <summary>
            0x00
            </summary>
        </member>
        <member name="P:Weave.Base.WeaveUser.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Weave.Base.WeaveUser.Passworld">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="P:Weave.Base.WeaveUser.Token">
            <summary>
            回话ID
            </summary>
        </member>
        <member name="P:Weave.Base.WeaveUser.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:Weave.Base.WeaveNetWorkItems">
            <summary>
            连接到服务器的客户端Socket封装对象类
            </summary>
        </member>
        <member name="T:Weave.Base.WeavePortTypeEnum">
            <summary>
            有Web,Json,Bytes,Http,udpBytes,jsonudp这几种类型
            </summary>
        </member>
        <member name="T:Weave.Base.WeaveDataTypeEnum">
            <summary>
            有Json, Bytes 两种类型
            </summary>
        </member>
        <member name="T:Weave.Base.WeavePipelineTypeEnum">
            <summary>
            有ten=10, hundred=100, thousand=1000, ten_thousand=10000 三种
            </summary>
        </member>
        <member name="T:Fleck.QueuedStream">
            <summary>
            包装流并对多个写入操作进行排队。
            对于包装 slstream 非常有用, 因为它不支持多个同时写入操作。
            </summary>
        </member>
    </members>
</doc>
